{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"introduction/","text":"Introduction This package supplies a laminas-config-aggregator post processor that consumes the Symfony DependencyInjection ParameterBag in order to allow users to define parameters to re-use within their configuration. As an example, one could define an API key, cache path, or other common filesystem location once as a parameter , and then refer to that parameter multiple times within the configuration, in order to simplify updates to the value. Parameters are referenced within configuration using %name% notation. Parameters may be defined as nested associative arrays as well; in such cases, a . character references an additional layer of hierarchy to dereference: %foo.bar% refers to the paramter found at 'foo' =&gt; [ 'bar' =&gt; 'value' ] . Available since version 1.1.0 Parameters which reference other parameters can also be used.","title":"Introduction"},{"location":"introduction/#introduction","text":"This package supplies a laminas-config-aggregator post processor that consumes the Symfony DependencyInjection ParameterBag in order to allow users to define parameters to re-use within their configuration. As an example, one could define an API key, cache path, or other common filesystem location once as a parameter , and then refer to that parameter multiple times within the configuration, in order to simplify updates to the value. Parameters are referenced within configuration using %name% notation. Parameters may be defined as nested associative arrays as well; in such cases, a . character references an additional layer of hierarchy to dereference: %foo.bar% refers to the paramter found at 'foo' =&gt; [ 'bar' =&gt; 'value' ] . Available since version 1.1.0 Parameters which reference other parameters can also be used.","title":"Introduction"},{"location":"parameter-lazy-loading/","text":"Parameter Lazy Loading Available since version 1.4.0 If your parameters are resolved from a database, redis, consul, or any other i/o resource, you can use the LazyParameterPostProcessor which consumes just a callable which can provide the parameters. In case you are using config-caching, the i/o is not executed when performed in the callable .","title":"Parameter Lazy Loading"},{"location":"parameter-lazy-loading/#parameter-lazy-loading","text":"Available since version 1.4.0 If your parameters are resolved from a database, redis, consul, or any other i/o resource, you can use the LazyParameterPostProcessor which consumes just a callable which can provide the parameters. In case you are using config-caching, the i/o is not executed when performed in the callable .","title":"Parameter Lazy Loading"},{"location":"usage/","text":"Basic Usage If you wish to use a literal %name% within your configuration, you must double-escape the percentage signs: %%name%% . Failure to do so will result in an exception when post-processing the configuration. As a self-contained example: use Laminas\\ConfigAggregator\\ArrayProvider; use Laminas\\ConfigAggregator\\ConfigAggregator; use Laminas\\ConfigAggregatorParameters\\ParameterPostProcessor; $aggregator = new ConfigAggregator( [ new ArrayProvider([ 'parameter_usage' =&gt; '%foo%', 'parameter_name' =&gt; '%%foo%%', 'recursive_parameter_usage' =&gt; '%bar.baz%', 'parameterized_parameter_usage' =&gt; '%bar.quux%', ]), ], null, [ new ParameterPostProcessor([ 'foo' =&gt; 'bar', 'bar' =&gt; [ 'baz' =&gt; 'qoo', 'quux' =&gt; '%foo%', // Since 1.1.0 ], ]), ] ); var_dump($aggregator-&gt;getMergedConfig()); The result of the above will be: array(5) { 'parameter_usage' =&gt; string(3) \"bar\" 'parameter_name' =&gt; string(5) \"%foo%\" 'recursive_parameter_usage' =&gt; string(3) \"qoo\" 'parameterized_parameter_usage' =&gt; string(3) \"bar\" 'parameters' =&gt; array(4) { 'foo' =&gt; string(3) \"bar\" 'bar' =&gt; array(2) { 'baz' =&gt; string(3) \"qoo\" 'quux' =&gt; string(3) \"bar\" } 'bar.baz' =&gt; string(3) \"qoo\" 'bar.quux' =&gt; string(3) \"bar\" } }","title":"Basic Usage"},{"location":"usage/#basic-usage","text":"If you wish to use a literal %name% within your configuration, you must double-escape the percentage signs: %%name%% . Failure to do so will result in an exception when post-processing the configuration. As a self-contained example: use Laminas\\ConfigAggregator\\ArrayProvider; use Laminas\\ConfigAggregator\\ConfigAggregator; use Laminas\\ConfigAggregatorParameters\\ParameterPostProcessor; $aggregator = new ConfigAggregator( [ new ArrayProvider([ 'parameter_usage' =&gt; '%foo%', 'parameter_name' =&gt; '%%foo%%', 'recursive_parameter_usage' =&gt; '%bar.baz%', 'parameterized_parameter_usage' =&gt; '%bar.quux%', ]), ], null, [ new ParameterPostProcessor([ 'foo' =&gt; 'bar', 'bar' =&gt; [ 'baz' =&gt; 'qoo', 'quux' =&gt; '%foo%', // Since 1.1.0 ], ]), ] ); var_dump($aggregator-&gt;getMergedConfig()); The result of the above will be: array(5) { 'parameter_usage' =&gt; string(3) \"bar\" 'parameter_name' =&gt; string(5) \"%foo%\" 'recursive_parameter_usage' =&gt; string(3) \"qoo\" 'parameterized_parameter_usage' =&gt; string(3) \"bar\" 'parameters' =&gt; array(4) { 'foo' =&gt; string(3) \"bar\" 'bar' =&gt; array(2) { 'baz' =&gt; string(3) \"qoo\" 'quux' =&gt; string(3) \"bar\" } 'bar.baz' =&gt; string(3) \"qoo\" 'bar.quux' =&gt; string(3) \"bar\" } }","title":"Basic Usage"}]}